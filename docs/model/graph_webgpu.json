{
  "kernel_source": "\n#include <metal_stdlib>\nusing namespace metal;\n\n#define OPTIMIZE 1\n\nkernel void im2col_610ebacc9760fdde8961a1533fc2d59c49f32624ba5fb391f7e5c57a(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index_thread[[thread_position_in_threadgroup]],\n                          uint index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 1\n#define SW_EQUAL_1 1\n#define DH_EQUAL_1 1\n#define DW_EQUAL_1 1\n#define C1_DIVIDABLE_BY_4 0\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)((static_buffer + meta_buffer[0]));\n    device float4 *col4 = (device float4 *)((static_buffer + meta_buffer[1]));\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = (static_buffer + meta_buffer[0]);\n    device float *col = (static_buffer + meta_buffer[1]);\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n#if !DH_EQUAL_1\n    const int DH = meta_buffer[10];\n#endif\n#if !DW_EQUAL_1\n    const int DW = meta_buffer[11];\n#endif\n    const int PH = meta_buffer[14];\n    const int PW = meta_buffer[15];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[12];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[13];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n    #if DH_EQUAL_1\n            const int h2 = h1 + PH - kh;\n    #else\n            const int h2 = h1 + PH - kh * DH;\n    #endif\n    \n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n    #if DH_EQUAL_1\n            const int h2 = (h1 + PH - kh) / SH;\n    #else\n            const int h2 = (h1 + PH - kh * DH) / SH;\n    #endif\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n    #if DW_EQUAL_1\n                const int w2 = w1 + PW - kw;\n    #else\n                const int w2 = w1 + PW - kw * DW;\n    #endif\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n    #if DW_EQUAL_1\n                const int w2 = (w1 + PW - kw) / SW;\n    #else\n                const int w2 = (w1 + PW - kw * DW) / SW;\n    #endif\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef DH_EQUAL_1\n#undef DW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_5c3040bbee8733926dddc2cc14cdc9216209a32d39c7874cd0198110(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 0\n#define K_DIVIDABLE_BY_8 0\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            float v9;\n            {\n                const float slope = *((device float *)(&meta_buffer[7]));\n                v9 = v8 > 0 ? v8 : (v8 * slope);\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void maxpooling2d_fdd28c996dc6552178be6541f1b2adfa1ab7c31ec0bb9c2b70bff1e7(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = (static_buffer + meta_buffer[0]);\n    device float *Y = (static_buffer + meta_buffer[1]);\n    const int N = meta_buffer[2];\n    const int H1 = meta_buffer[3];\n    const int W1 = meta_buffer[4];\n    const int C = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    \n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int SH = meta_buffer[10];\n    const int SW = meta_buffer[11];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n    \n    for (int gid = index; gid < N * H2 * W2 * C; gid += num_threads) {\n        const int c = gid % C;\n        const int w2 = gid / C % W2;\n        const int h2 = gid / C / W2 % H2;\n        const int n = gid / C / W2 / H2;\n\n        float v = -1e7;\n        for (int kh = 0; kh < KH; kh++) {\n            const int h1 = h2 * SH - PH + kh;\n            if (h1 < 0 || h1 >= H1) continue;\n            \n            for (int kw = 0; kw < KW; kw++) {\n                const int w1 = w2 * SW - PW + kw;\n                if (w1 < 0 || w1 >= W1) continue;\n\n                v = v > X[((n * H1 + h1) * W1 + w1) * C + c] ? v : X[((n * H1 + h1) * W1 + w1) * C + c];\n            }\n        }\n\n        Y[gid] = v;\n    }\n}\n\n\nkernel void im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index_thread[[thread_position_in_threadgroup]],\n                          uint index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 1\n#define SW_EQUAL_1 1\n#define DH_EQUAL_1 1\n#define DW_EQUAL_1 1\n#define C1_DIVIDABLE_BY_4 1\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)((static_buffer + meta_buffer[0]));\n    device float4 *col4 = (device float4 *)((static_buffer + meta_buffer[1]));\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = (static_buffer + meta_buffer[0]);\n    device float *col = (static_buffer + meta_buffer[1]);\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n#if !DH_EQUAL_1\n    const int DH = meta_buffer[10];\n#endif\n#if !DW_EQUAL_1\n    const int DW = meta_buffer[11];\n#endif\n    const int PH = meta_buffer[14];\n    const int PW = meta_buffer[15];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[12];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[13];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n    #if DH_EQUAL_1\n            const int h2 = h1 + PH - kh;\n    #else\n            const int h2 = h1 + PH - kh * DH;\n    #endif\n    \n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n    #if DH_EQUAL_1\n            const int h2 = (h1 + PH - kh) / SH;\n    #else\n            const int h2 = (h1 + PH - kh * DH) / SH;\n    #endif\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n    #if DW_EQUAL_1\n                const int w2 = w1 + PW - kw;\n    #else\n                const int w2 = w1 + PW - kw * DW;\n    #endif\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n    #if DW_EQUAL_1\n                const int w2 = (w1 + PW - kw) / SW;\n    #else\n                const int w2 = (w1 + PW - kw * DW) / SW;\n    #endif\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef DH_EQUAL_1\n#undef DW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void space2depth_3d7d012546077cbba94f134e717751aaec668bbdeefdc0afd67a676b(device float * static_buffer[[buffer(0)]],\n                     device float * dynamic_buffer[[buffer(1)]],\n                     const device int * meta_buffer[[buffer(2)]],\n                     uint index[[thread_position_in_grid]],\n                     uint num_threads[[threads_per_grid]])\n{\n    const device float *x = (static_buffer + meta_buffer[0]);\n    device float *y = (static_buffer + meta_buffer[1]);\n    const int r = meta_buffer[2];\n\n    const int N = meta_buffer[3];\n    const int C1 = meta_buffer[4];\n    const int C2 = meta_buffer[5];\n    const int H1 = meta_buffer[6];\n    const int H2 = meta_buffer[7];\n    const int W1 = meta_buffer[8];\n    const int W2 = meta_buffer[9];\n\n    for (int gid = index; gid < N*H1*W1*C1; gid += num_threads) {\n        const int c1 = gid % C1;\n        const int w1 = gid / C1 % W1;\n        const int h1 = gid / C1 / W1 % H1;\n        const int n = gid / C1 / W1 / H1;\n        const int w2 = w1 / r;\n        const int h2 = h1 / r;\n        const int c2 = c1 + (w1 % r) * C1 + (h1 % r) * C1 * r;\n        y[((n*H2+h2)*W2+w2)*C2+c2] = x[gid];\n    }\n}\n\n\nkernel void concat_bbb050fc2bb6edb8d1e5e2c9ef9415d626f60b261c1fac1fec217460(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    device float *y = (static_buffer + meta_buffer[0]);\n    const char N = meta_buffer[2];\n    const char D = meta_buffer[1];\n    const device int *y_offsets = (&(meta_buffer[23]));\n    const device int *x_shapes = (&(meta_buffer[15]));\n    const device int *x_strides_in_y = (&(meta_buffer[7]));\n    \n    int x_index = index;\n    \n    for (int n = 0; n < N; n++) {\n        const device float *x = (meta_buffer[3+2+ (n)] ? static_buffer : dynamic_buffer) + meta_buffer[3 + (n)];\n        const int y_offset = y_offsets[n];\n        const device int *x_shape = x_shapes + n*D;\n        const device int *x_stride_in_y = x_strides_in_y + n*D;\n        \n        int x_size = 1;\n        for (int d = 0; d < D; d++) {\n            x_size *= x_shape[d];\n        }\n        \n        while (x_index < x_size) { \n            int y_index = y_offset;\n            int s = x_index;\n            for (int d = D-1; d >= 0; d--) {\n                y_index += x_stride_in_y[d] * (s % x_shape[d]);\n                s /= x_shape[d];\n            }\n        \n            y[y_index] = x[x_index];\n            \n            x_index += num_threads;\n        }\n        \n        x_index -= x_size;\n    }\n}\n\n\nkernel void sgemm_7b4817c4ac9dfe433720b075aa47e84624573a88bc125170e1038e1b(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 0\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void mergedelementwise_036a6b275ba1b6363ad70a3470060a41d4faf8953edcd48ce2586666(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            float v9;\n            {\n                v9 = v8;\n            }\n            v3[d0*v5 + d1] = v9;\n        }\n    }\n}\n\n\nkernel void reshape_16bccba9a464498806aabf37d42e7f652af6d3922196b61ef1ee5108(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *x = (static_buffer + meta_buffer[0]);\n    device float *y = (static_buffer + meta_buffer[1]);\n\n    const int N = meta_buffer[2];\n\n    for (int gid = index; gid < N; gid += num_threads) {\n        y[gid] = x[gid];\n    }\n}\n\n\nkernel void splitaxis_7882fdb66d65c9369d20022189a19e7d6016c0b385af736f4c540fea(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *x = (static_buffer + meta_buffer[0]);\n    const char N = meta_buffer[2];\n    const char D = meta_buffer[1];\n    const device int *x_offsets = (&(meta_buffer[63]));\n    const device int *y_shapes = (&(meta_buffer[39]));\n    const device int *y_strides_in_x = (&(meta_buffer[15]));\n\n    int y_index = index;\n\n    for (int n = 0; n < N; n++) {\n        device float *y = (meta_buffer[3+6+ (n)] ? static_buffer : dynamic_buffer) + meta_buffer[3 + (n)];\n        const int x_offset = x_offsets[n];\n        const device int *y_shape = y_shapes + n*D;\n        const device int *y_stride_in_x = y_strides_in_x + n*D;\n\n        int y_size = 1;\n        for (int d = 0; d < D; d++) {\n            y_size *= y_shape[d];\n        }\n\n        while (y_index < y_size) { \n            int x_index = x_offset;\n            int s = y_index;\n            for (int d = D-1; d >= 0; d--) {\n                x_index += y_stride_in_x[d] * (s % y_shape[d]);\n                s /= y_shape[d];\n            }\n\n            y[y_index] = x[x_index];\n\n            y_index += num_threads;\n        }\n\n        y_index -= y_size;\n    }\n}\n\n\nkernel void sigmoid_3080542b83f212479fe12ece22ee5346e4a657a6c50ce2d3f5a4ffdf(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    device float * v2 = (static_buffer + meta_buffer[1]);\n    const int D0 = meta_buffer[2];\n    int d0;\n    for (d0 = gid; d0 < D0; d0 += num_threads) {\n        const float v3 = v1[d0];\n        float v4;\n        {\n            v4 = tanh(0.5f * v3) * 0.5f + 0.5f;\n        }\n        v2[d0] = v4;\n    }\n}\n\n\nkernel void mergedelementwise_dc11b303844c03d85db78196210d56b82d35b395f46d4b60d2cc9abf(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v7 = v1[d0 + d1*v4];\n            float v8;\n            {\n                v8 = tanh(0.5f * v7) * 0.5f + 0.5f;\n            }\n            float v9;\n            {\n                v9 = v8 + v6;\n            }\n            float v10;\n            {\n                const float value = *((device float *)(&meta_buffer[7]));\n                v10 = v9 * value;\n            }\n            v3[d0 + d1*v5] = v10;\n        }\n    }\n}\n\n\nkernel void mergedelementwise_5e9d7058ff9bc0ced41c6bf713e2f3d9ab6f8c1d8bb4a7264dd05092(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int v6 = meta_buffer[5];\n    const int v7 = meta_buffer[6];\n    const int D0 = meta_buffer[7];\n    const int D1 = meta_buffer[8];\n    const int D2 = meta_buffer[9];\n    int d0;\n    for (d0 = 0; d0 < D0; d0 += 1) {\n        const float v8 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n            int d2;\n            for (d2 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d2 < D2; d2 += ((num_threads > 8) ? 8 : 1)) {\n                const float v9 = v1[d0*v4 + d1*v5 + d2];\n                float v10;\n                {\n                    v10 = tanh(0.5f * v9) * 0.5f + 0.5f;\n                }\n                float v11;\n                {\n                    v11 = v10 + v8;\n                }\n                float v12;\n                {\n                    const float value = *((device float *)(&meta_buffer[10]));\n                    v12 = v11 * value;\n                }\n                v3[d0*v6 + d1*v7 + d2] = v12;\n            }\n        }\n    }\n}\n\n\nkernel void mergedelementwise_2aeef5c2ffcb3d0f789d6e7b885e8578b7fa09195d1bf3dcae288b02(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v7 = v1[d0*v4 + d1];\n            float v8;\n            {\n                v8 = exp(v7);\n            }\n            float v9;\n            {\n                v9 = v8 * v6;\n            }\n            float v10;\n            {\n                const float value = *((device float *)(&meta_buffer[7]));\n                v10 = v9 * value;\n            }\n            v3[d0*v5 + d1] = v10;\n        }\n    }\n}\n\n\nkernel void softmax_19085802eeba7fd293021820114957d9f2a820f7f48816b74c49d271(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = (static_buffer + meta_buffer[0]);\n    device float *Y = (static_buffer + meta_buffer[1]);\n    const int D1 = meta_buffer[2];\n    const int D2 = meta_buffer[3];\n    const int D3 = meta_buffer[4];\n\n    for (int gid = index; gid < D1 * D3; gid += num_threads) {\n        const int d3 = gid % D3;\n        const int d1 = gid / D3;\n        \n        float set_max = 0.0f;\n        for (int d2 = 0; d2 < D2; d2++) {\n            float val = X[(d1 * D2 + d2) * D3 + d3];\n            if (val > set_max) {\n                set_max = val;\n            }\n        }\n        \n        float sum_exp = 0.0f;\n        for (int d2 = 0; d2 < D2; d2++) {\n            float val = X[(d1 * D2 + d2) * D3 + d3];\n            float exp_x = exp(val - set_max);\n            sum_exp += exp_x;\n            Y[(d1 * D2 + d2) * D3 + d3] = exp_x;\n        }\n        \n        for (int d2 = 0; d2 < D2; d2++) {\n            Y[(d1 * D2 + d2) * D3 + d3] /= sum_exp;\n        }\n    }\n}\n",
  "exec_infos": [
    {
      "entry_func_name": "im2col_610ebacc9760fdde8961a1533fc2d59c49f32624ba5fb391f7e5c57a",
      "threadgroups_per_grid": {
        "width": 202500,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        44,
        249,
        4,
        4,
        92,
        41,
        112,
        4,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        192,
        1,
        0,
        0,
        192,
        1,
        0,
        0,
        192,
        1,
        0,
        0,
        192,
        1,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_5c3040bbee8733926dddc2cc14cdc9216209a32d39c7874cd0198110",
      "threadgroups_per_grid": {
        "width": 3136,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        112,
        4,
        0,
        228,
        4,
        4,
        92,
        41,
        14,
        4,
        0,
        16,
        3,
        0,
        32,
        0,
        0,
        0,
        27,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        12,
        249,
        4,
        4,
        92,
        41,
        14,
        4,
        92,
        41,
        14,
        4,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        16,
        3,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "maxpooling2d_fdd28c996dc6552178be6541f1b2adfa1ab7c31ec0bb9c2b70bff1e7",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        92,
        169,
        27,
        5,
        1,
        0,
        0,
        0,
        192,
        1,
        0,
        0,
        192,
        1,
        0,
        0,
        32,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 51076,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        169,
        27,
        5,
        92,
        41,
        63,
        4,
        1,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 784,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        63,
        4,
        0,
        100,
        4,
        4,
        92,
        41,
        14,
        4,
        0,
        196,
        0,
        0,
        64,
        0,
        0,
        0,
        32,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        204,
        248,
        4,
        4,
        92,
        41,
        14,
        4,
        92,
        41,
        14,
        4,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        196,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "maxpooling2d_fdd28c996dc6552178be6541f1b2adfa1ab7c31ec0bb9c2b70bff1e7",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        92,
        233,
        148,
        4,
        1,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 12996,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        233,
        148,
        4,
        92,
        169,
        38,
        4,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 196,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        169,
        38,
        4,
        0,
        164,
        1,
        4,
        92,
        41,
        14,
        4,
        0,
        49,
        0,
        0,
        128,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        12,
        248,
        4,
        4,
        92,
        41,
        14,
        4,
        92,
        41,
        14,
        4,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        49,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 196,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        0,
        172,
        4,
        4,
        92,
        169,
        38,
        4,
        0,
        49,
        0,
        0,
        64,
        0,
        0,
        0,
        128,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        140,
        248,
        4,
        4,
        92,
        169,
        38,
        4,
        92,
        169,
        38,
        4,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        49,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 12996,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        169,
        38,
        4,
        92,
        233,
        50,
        4,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 196,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        233,
        50,
        4,
        0,
        196,
        2,
        4,
        92,
        41,
        14,
        4,
        0,
        49,
        0,
        0,
        128,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        12,
        247,
        4,
        4,
        92,
        41,
        14,
        4,
        92,
        41,
        14,
        4,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        49,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "maxpooling2d_fdd28c996dc6552178be6541f1b2adfa1ab7c31ec0bb9c2b70bff1e7",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        92,
        137,
        81,
        4,
        1,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 3364,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        137,
        81,
        4,
        92,
        105,
        26,
        4,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        105,
        26,
        4,
        0,
        164,
        244,
        3,
        92,
        41,
        14,
        4,
        64,
        12,
        0,
        0,
        0,
        1,
        0,
        0,
        128,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        12,
        243,
        4,
        4,
        92,
        41,
        14,
        4,
        92,
        41,
        14,
        4,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        12,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        0,
        228,
        3,
        4,
        92,
        105,
        26,
        4,
        64,
        12,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        140,
        247,
        4,
        4,
        92,
        105,
        26,
        4,
        92,
        105,
        26,
        4,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        64,
        12,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 3364,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        105,
        26,
        4,
        92,
        137,
        32,
        4,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        137,
        32,
        4,
        0,
        36,
        249,
        3,
        92,
        41,
        14,
        4,
        64,
        12,
        0,
        0,
        0,
        1,
        0,
        0,
        128,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        12,
        246,
        4,
        4,
        92,
        41,
        14,
        4,
        92,
        41,
        14,
        4,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        12,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "maxpooling2d_fdd28c996dc6552178be6541f1b2adfa1ab7c31ec0bb9c2b70bff1e7",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        92,
        217,
        47,
        4,
        1,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        217,
        47,
        4,
        92,
        73,
        20,
        4,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        73,
        20,
        4,
        0,
        0,
        204,
        3,
        92,
        41,
        14,
        4,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        9,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        96,
        233,
        4,
        4,
        92,
        41,
        14,
        4,
        92,
        41,
        14,
        4,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        3,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        0,
        164,
        255,
        3,
        92,
        73,
        20,
        4,
        16,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        12,
        244,
        4,
        4,
        92,
        73,
        20,
        4,
        92,
        73,
        20,
        4,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        16,
        3,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        73,
        20,
        4,
        92,
        89,
        23,
        4,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        89,
        23,
        4,
        0,
        0,
        186,
        3,
        92,
        41,
        14,
        4,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        9,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        96,
        231,
        4,
        4,
        92,
        41,
        14,
        4,
        92,
        41,
        14,
        4,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        3,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        0,
        164,
        253,
        3,
        92,
        73,
        20,
        4,
        16,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        12,
        245,
        4,
        4,
        92,
        73,
        20,
        4,
        92,
        73,
        20,
        4,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        16,
        3,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        73,
        20,
        4,
        92,
        89,
        23,
        4,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        89,
        23,
        4,
        0,
        0,
        168,
        3,
        92,
        41,
        14,
        4,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        9,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        96,
        239,
        4,
        4,
        92,
        41,
        14,
        4,
        92,
        41,
        14,
        4,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        3,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "maxpooling2d_fdd28c996dc6552178be6541f1b2adfa1ab7c31ec0bb9c2b70bff1e7",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        92,
        73,
        20,
        4,
        1,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        73,
        20,
        4,
        92,
        89,
        23,
        4,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        89,
        23,
        4,
        0,
        0,
        208,
        2,
        92,
        73,
        20,
        4,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        18,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        208,
        4,
        4,
        92,
        73,
        20,
        4,
        92,
        73,
        20,
        4,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        73,
        20,
        4,
        0,
        0,
        230,
        3,
        92,
        89,
        23,
        4,
        196,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        96,
        237,
        4,
        4,
        92,
        89,
        23,
        4,
        92,
        89,
        23,
        4,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        196,
        0,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        89,
        23,
        4,
        92,
        225,
        24,
        4,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        225,
        24,
        4,
        0,
        0,
        24,
        3,
        92,
        73,
        20,
        4,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        18,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        212,
        4,
        4,
        92,
        73,
        20,
        4,
        92,
        73,
        20,
        4,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        73,
        20,
        4,
        0,
        0,
        222,
        3,
        92,
        89,
        23,
        4,
        196,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        96,
        235,
        4,
        4,
        92,
        89,
        23,
        4,
        92,
        89,
        23,
        4,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        196,
        0,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        89,
        23,
        4,
        92,
        225,
        24,
        4,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        225,
        24,
        4,
        0,
        0,
        96,
        3,
        92,
        73,
        20,
        4,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        18,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        224,
        4,
        4,
        92,
        73,
        20,
        4,
        92,
        73,
        20,
        4,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        73,
        20,
        4,
        92,
        89,
        23,
        4,
        1,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        89,
        23,
        4,
        0,
        0,
        64,
        2,
        92,
        73,
        20,
        4,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        36,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        220,
        4,
        4,
        92,
        73,
        20,
        4,
        92,
        73,
        20,
        4,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        73,
        20,
        4,
        92,
        105,
        26,
        4,
        1,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        105,
        26,
        4,
        0,
        0,
        176,
        1,
        92,
        89,
        23,
        4,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        36,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        204,
        4,
        4,
        92,
        89,
        23,
        4,
        92,
        89,
        23,
        4,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "space2depth_3d7d012546077cbba94f134e717751aaec668bbdeefdc0afd67a676b",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        92,
        105,
        26,
        4,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        8,
        0,
        0,
        28,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        14,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "concat_bbb050fc2bb6edb8d1e5e2c9ef9415d626f60b261c1fac1fec217460",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        92,
        105,
        26,
        4,
        92,
        89,
        23,
        4,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        48,
        9,
        0,
        0,
        168,
        0,
        0,
        0,
        12,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        48,
        9,
        0,
        0,
        168,
        0,
        0,
        0,
        12,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        1,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        8,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        92,
        89,
        23,
        4,
        1,
        0,
        0,
        0,
        0,
        12,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        89,
        23,
        4,
        0,
        0,
        0,
        0,
        92,
        41,
        14,
        4,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        108,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_9353e581bf3ccd31cf47c79a42514de47cadcafe394bcbf89349e499",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        216,
        4,
        4,
        92,
        41,
        14,
        4,
        92,
        41,
        14,
        4,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0,
        205,
        204,
        204,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_7b4817c4ac9dfe433720b075aa47e84624573a88bc125170e1038e1b",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 7,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        0,
        0,
        238,
        3,
        92,
        57,
        17,
        4,
        196,
        0,
        0,
        0,
        169,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_036a6b275ba1b6363ad70a3470060a41d4faf8953edcd48ce2586666",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        96,
        241,
        4,
        4,
        92,
        57,
        17,
        4,
        92,
        41,
        14,
        4,
        169,
        1,
        0,
        0,
        196,
        0,
        0,
        0,
        169,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "reshape_16bccba9a464498806aabf37d42e7f652af6d3922196b61ef1ee5108",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        148,
        114,
        15,
        4,
        100,
        69,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "splitaxis_7882fdb66d65c9369d20022189a19e7d6016c0b385af736f4c540fea",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        148,
        114,
        15,
        4,
        4,
        0,
        0,
        0,
        6,
        0,
        0,
        0,
        216,
        52,
        14,
        4,
        236,
        106,
        15,
        4,
        192,
        110,
        15,
        4,
        92,
        41,
        14,
        4,
        4,
        49,
        14,
        4,
        172,
        56,
        14,
        4,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        20,
        65,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        20,
        65,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        20,
        65,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        20,
        65,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        20,
        65,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        20,
        65,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        80,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        136,
        1,
        0,
        0,
        76,
        2,
        0,
        0,
        16,
        3,
        0,
        0,
        212,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sigmoid_3080542b83f212479fe12ece22ee5346e4a657a6c50ce2d3f5a4ffdf",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        4,
        49,
        14,
        4,
        48,
        45,
        14,
        4,
        212,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_dc11b303844c03d85db78196210d56b82d35b395f46d4b60d2cc9abf",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        216,
        52,
        14,
        4,
        60,
        41,
        14,
        4,
        4,
        49,
        14,
        4,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        70,
        0,
        0,
        0,
        37,
        73,
        146,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_5e9d7058ff9bc0ced41c6bf713e2f3d9ab6f8c1d8bb4a7264dd05092",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        236,
        106,
        15,
        4,
        44,
        41,
        14,
        4,
        216,
        52,
        14,
        4,
        14,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        37,
        73,
        146,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_2aeef5c2ffcb3d0f789d6e7b885e8578b7fa09195d1bf3dcae288b02",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        110,
        15,
        4,
        76,
        41,
        14,
        4,
        236,
        106,
        15,
        4,
        196,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        37,
        73,
        146,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "reshape_16bccba9a464498806aabf37d42e7f652af6d3922196b61ef1ee5108",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        172,
        56,
        14,
        4,
        192,
        110,
        15,
        4,
        64,
        50,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "softmax_19085802eeba7fd293021820114957d9f2a820f7f48816b74c49d271",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        110,
        15,
        4,
        192,
        110,
        15,
        4,
        212,
        3,
        0,
        0,
        80,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "reshape_16bccba9a464498806aabf37d42e7f652af6d3922196b61ef1ee5108",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        110,
        15,
        4,
        172,
        56,
        14,
        4,
        64,
        50,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "mergedelementwise_2aeef5c2ffcb3d0f789d6e7b885e8578b7fa09195d1bf3dcae288b02",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        92,
        41,
        14,
        4,
        84,
        41,
        14,
        4,
        192,
        110,
        15,
        4,
        196,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        37,
        73,
        146,
        61
      ],
      "unresolved_value_list": []
    }
  ],
  "weight_encoding": "eightbit",
  "memory_layout": {
    "static": {
      "size": 87304540,
      "allocations": {
        "v52": {
          "name": "v52",
          "offset": 0,
          "size": 28311552
        },
        "v110": {
          "name": "v110",
          "offset": 28311552,
          "size": 9437184
        },
        "v118": {
          "name": "v118",
          "offset": 37748736,
          "size": 9437184
        },
        "v15": {
          "name": "v15",
          "offset": 47185920,
          "size": 4718592
        },
        "v62": {
          "name": "v62",
          "offset": 51904512,
          "size": 4718592
        },
        "v126": {
          "name": "v126",
          "offset": 56623104,
          "size": 4718592
        },
        "v64": {
          "name": "v64",
          "offset": 61341696,
          "size": 1179648
        },
        "v75": {
          "name": "v75",
          "offset": 62521344,
          "size": 1179648
        },
        "v86": {
          "name": "v86",
          "offset": 63700992,
          "size": 1179648
        },
        "v54": {
          "name": "v54",
          "offset": 64880640,
          "size": 524288
        },
        "v68": {
          "name": "v68",
          "offset": 65404928,
          "size": 524288
        },
        "v125": {
          "name": "v125",
          "offset": 65929216,
          "size": 435200
        },
        "v24": {
          "name": "v24",
          "offset": 66364416,
          "size": 294912
        },
        "v78": {
          "name": "v78",
          "offset": 66659328,
          "size": 294912
        },
        "v71": {
          "name": "v71",
          "offset": 66954240,
          "size": 131072
        },
        "v83": {
          "name": "v83",
          "offset": 67085312,
          "size": 131072
        },
        "v26": {
          "name": "v26",
          "offset": 67216384,
          "size": 73728
        },
        "v81": {
          "name": "v81",
          "offset": 67290112,
          "size": 73728
        },
        "v21": {
          "name": "v21",
          "offset": 67363840,
          "size": 32768
        },
        "v61": {
          "name": "v61",
          "offset": 67396608,
          "size": 18432
        },
        "v22": {
          "name": "v22",
          "offset": 67415040,
          "size": 8192
        },
        "v10": {
          "name": "v10",
          "offset": 67423232,
          "size": 1024
        },
        "v50": {
          "name": "v50",
          "offset": 67424256,
          "size": 1024
        },
        "v96": {
          "name": "v96",
          "offset": 67425280,
          "size": 1024
        },
        "v102": {
          "name": "v102",
          "offset": 67426304,
          "size": 1024
        },
        "v109": {
          "name": "v109",
          "offset": 67427328,
          "size": 1024
        },
        "v121": {
          "name": "v121",
          "offset": 67428352,
          "size": 1024
        },
        "v58": {
          "name": "v58",
          "offset": 67429376,
          "size": 864
        },
        "v6": {
          "name": "v6",
          "offset": 67430240,
          "size": 512
        },
        "v31": {
          "name": "v31",
          "offset": 67430752,
          "size": 512
        },
        "v37": {
          "name": "v37",
          "offset": 67431264,
          "size": 512
        },
        "v104": {
          "name": "v104",
          "offset": 67431776,
          "size": 512
        },
        "v123": {
          "name": "v123",
          "offset": 67432288,
          "size": 512
        },
        "v29": {
          "name": "v29",
          "offset": 67432800,
          "size": 425
        },
        "v4": {
          "name": "v4",
          "offset": 67433228,
          "size": 256
        },
        "v45": {
          "name": "v45",
          "offset": 67433484,
          "size": 256
        },
        "v76": {
          "name": "v76",
          "offset": 67433740,
          "size": 256
        },
        "v91": {
          "name": "v91",
          "offset": 67433996,
          "size": 256
        },
        "v9": {
          "name": "v9",
          "offset": 67434252,
          "size": 128
        },
        "v82": {
          "name": "v82",
          "offset": 67434380,
          "size": 128
        },
        "v85": {
          "name": "v85",
          "offset": 67434508,
          "size": 128
        },
        "v33": {
          "name": "v33",
          "offset": 67434636,
          "size": 64
        },
        "v53": {
          "name": "v53",
          "offset": 67434700,
          "size": 64
        },
        "v129": {
          "name": "v129",
          "offset": 67434764,
          "size": 32
        },
        "v116": {
          "name": "v116",
          "offset": 67434796,
          "size": 602112
        },
        "v98": {
          "name": "v98",
          "offset": 68036908,
          "size": 14
        },
        "v119": {
          "name": "v119",
          "offset": 68036924,
          "size": 14
        },
        "v25": {
          "name": "v25",
          "offset": 68036940,
          "size": 5
        },
        "v47": {
          "name": "v47",
          "offset": 68036948,
          "size": 5
        },
        "v94": {
          "name": "v94",
          "offset": 68036956,
          "size": 401408
        },
        "v19": {
          "name": "v19",
          "offset": 68036956,
          "size": 980
        },
        "v28": {
          "name": "v28",
          "offset": 68036956,
          "size": 6422528
        },
        "v90": {
          "name": "v90",
          "offset": 68036956,
          "size": 3211264
        },
        "v49": {
          "name": "v49",
          "offset": 68036956,
          "size": 1605632
        },
        "v113": {
          "name": "v113",
          "offset": 68036956,
          "size": 1605632
        },
        "v46": {
          "name": "v46",
          "offset": 68036956,
          "size": 802816
        },
        "v111": {
          "name": "v111",
          "offset": 68036956,
          "size": 802816
        },
        "v122": {
          "name": "v122",
          "offset": 68036956,
          "size": 401408
        },
        "v106": {
          "name": "v106",
          "offset": 68036956,
          "size": 401408
        },
        "v87": {
          "name": "v87",
          "offset": 68036956,
          "size": 200704
        },
        "v114": {
          "name": "v114",
          "offset": 68036956,
          "size": 602112
        },
        "v79": {
          "name": "v79",
          "offset": 68036956,
          "size": 83300
        },
        "v112": {
          "name": "v112",
          "offset": 68037936,
          "size": 980
        },
        "v12": {
          "name": "v12",
          "offset": 68038916,
          "size": 980
        },
        "v93": {
          "name": "v93",
          "offset": 68038916,
          "size": 980
        },
        "v55": {
          "name": "v55",
          "offset": 68039896,
          "size": 980
        },
        "v73": {
          "name": "v73",
          "offset": 68039896,
          "size": 980
        },
        "v108": {
          "name": "v108",
          "offset": 68040876,
          "size": 78400
        },
        "v30": {
          "name": "v30",
          "offset": 68040876,
          "size": 78400
        },
        "v41": {
          "name": "v41",
          "offset": 68119276,
          "size": 980
        },
        "v57": {
          "name": "v57",
          "offset": 68119276,
          "size": 980
        },
        "v43": {
          "name": "v43",
          "offset": 68120256,
          "size": 980
        },
        "v127": {
          "name": "v127",
          "offset": 68120256,
          "size": 78400
        },
        "v80": {
          "name": "v80",
          "offset": 68120256,
          "size": 980
        },
        "v69": {
          "name": "v69",
          "offset": 68121236,
          "size": 83300
        },
        "v3": {
          "name": "v3",
          "offset": 68237660,
          "size": 83300
        },
        "v115": {
          "name": "v115",
          "offset": 68438364,
          "size": 200704
        },
        "v100": {
          "name": "v100",
          "offset": 68438364,
          "size": 200704
        },
        "v32": {
          "name": "v32",
          "offset": 68438364,
          "size": 200704
        },
        "v92": {
          "name": "v92",
          "offset": 68438364,
          "size": 200704
        },
        "v84": {
          "name": "v84",
          "offset": 68438364,
          "size": 200704
        },
        "v77": {
          "name": "v77",
          "offset": 68438364,
          "size": 200704
        },
        "v34": {
          "name": "v34",
          "offset": 68438364,
          "size": 1806336
        },
        "v7": {
          "name": "v7",
          "offset": 68438364,
          "size": 100352
        },
        "v72": {
          "name": "v72",
          "offset": 68639068,
          "size": 200704
        },
        "v97": {
          "name": "v97",
          "offset": 68639068,
          "size": 100352
        },
        "v88": {
          "name": "v88",
          "offset": 68639068,
          "size": 100352
        },
        "v1": {
          "name": "v1",
          "offset": 68639068,
          "size": 1806336
        },
        "v35": {
          "name": "v35",
          "offset": 68639068,
          "size": 1806336
        },
        "v23": {
          "name": "v23",
          "offset": 68639068,
          "size": 903168
        },
        "v44": {
          "name": "v44",
          "offset": 68639068,
          "size": 1806336
        },
        "v60": {
          "name": "v60",
          "offset": 68639068,
          "size": 5419008
        },
        "v117": {
          "name": "v117",
          "offset": 68739420,
          "size": 903168
        },
        "v66": {
          "name": "v66",
          "offset": 68739420,
          "size": 903168
        },
        "v40": {
          "name": "v40",
          "offset": 68839772,
          "size": 401408
        },
        "v20": {
          "name": "v20",
          "offset": 68839772,
          "size": 3612672
        },
        "v103": {
          "name": "v103",
          "offset": 68839772,
          "size": 1806336
        },
        "v99": {
          "name": "v99",
          "offset": 68839772,
          "size": 401408
        },
        "v36": {
          "name": "v36",
          "offset": 69241180,
          "size": 3612672
        },
        "v42": {
          "name": "v42",
          "offset": 69642588,
          "size": 802816
        },
        "v39": {
          "name": "v39",
          "offset": 69642588,
          "size": 7225344
        },
        "v74": {
          "name": "v74",
          "offset": 70244700,
          "size": 200704
        },
        "v48": {
          "name": "v48",
          "offset": 70445404,
          "size": 7225344
        },
        "v2": {
          "name": "v2",
          "offset": 71248220,
          "size": 14450688
        },
        "v16": {
          "name": "v16",
          "offset": 72452444,
          "size": 401408
        },
        "v13": {
          "name": "v13",
          "offset": 74459484,
          "size": 5419008
        },
        "v17": {
          "name": "v17",
          "offset": 76867932,
          "size": 802816
        },
        "v0": {
          "name": "v0",
          "offset": 85698908,
          "size": 1605632
        },
        "v5": {
          "name": "v5",
          "offset": 68036956,
          "size": 1605632
        },
        "v8": {
          "name": "v8",
          "offset": 68036956,
          "size": 3211264
        },
        "v11": {
          "name": "v11",
          "offset": 68036956,
          "size": 802816
        },
        "v14": {
          "name": "v14",
          "offset": 68036956,
          "size": 1605632
        },
        "v18": {
          "name": "v18",
          "offset": 68036956,
          "size": 6422528
        },
        "v27": {
          "name": "v27",
          "offset": 68120256,
          "size": 78400
        },
        "v38": {
          "name": "v38",
          "offset": 68438364,
          "size": 200704
        },
        "v51": {
          "name": "v51",
          "offset": 68438364,
          "size": 200704
        },
        "v56": {
          "name": "v56",
          "offset": 68036956,
          "size": 401408
        },
        "v59": {
          "name": "v59",
          "offset": 68036956,
          "size": 802816
        },
        "v63": {
          "name": "v63",
          "offset": 68438364,
          "size": 200704
        },
        "v65": {
          "name": "v65",
          "offset": 68839772,
          "size": 401408
        },
        "v67": {
          "name": "v67",
          "offset": 69642588,
          "size": 802816
        },
        "v70": {
          "name": "v70",
          "offset": 68036956,
          "size": 401408
        },
        "v89": {
          "name": "v89",
          "offset": 68639068,
          "size": 200704
        },
        "v95": {
          "name": "v95",
          "offset": 68438364,
          "size": 200704
        },
        "v101": {
          "name": "v101",
          "offset": 68438364,
          "size": 200704
        },
        "v105": {
          "name": "v105",
          "offset": 68036956,
          "size": 200704
        },
        "v107": {
          "name": "v107",
          "offset": 68639068,
          "size": 100352
        },
        "v120": {
          "name": "v120",
          "offset": 68036956,
          "size": 401408
        },
        "v124": {
          "name": "v124",
          "offset": 68639068,
          "size": 100352
        },
        "v128": {
          "name": "v128",
          "offset": 68438364,
          "size": 200704
        }
      }
    },
    "dynamic": {
      "size": 0,
      "allocations": {}
    }
  },
  "placeholders": {
    "__MAX_THREADS_PER_THREADGROUP__": null
  },
  "inputs": [
    "v116",
    "v119",
    "v98",
    "v25",
    "v47"
  ],
  "outputs": [
    "v12",
    "v55",
    "v41",
    "v80",
    "v112",
    "v30"
  ],
  "licenses": {
    "webdnn": "(C) Machine Intelligence Laboratory (The University of Tokyo), MIT License"
  }
}